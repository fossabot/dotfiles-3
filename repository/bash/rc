#!/usr/bin/env bash

# Load preferences
# shellcheck source=${HOME}/.bashrc_preferences
. ~/.bashrc_preferences

# Path settings
{
  unset PATH # PATH reset
  export PATH="${HOME}/.bin:/usr/local/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/sbin"
}

# Editor settings for generic use and SVN/GIT
{
  EDITOR=$(which vim)
  export EDITOR
  export VISUAL="${EDITOR}"
  export SVN_EDITOR="$EDITOR"
}

# Locale settings
{
  export LANGUAGE="en_US.UTF-8"
  export LANG="en_US.UTF-8"
  export LC_CTYPE="en_US.UTF-8"
  export LC_NUMERIC="en_US.UTF-8"
  export LC_TIME="en_US.UTF-8"
  export LC_COLLATE="en_US.UTF-8"
  export LC_MONETARY="en_US.UTF-8"
  export LC_MESSAGES="en_US.UTF-8"
  export LC_PAPER="en_US.UTF-8"
  export LC_NAME="en_US.UTF-8"
  export LC_ADDRESS="en_US.UTF-8"
  export LC_TELEPHONE="en_US.UTF-8"
  export LC_MEASUREMENT="en_US.UTF-8"
  export LC_IDENTIFICATION="en_US.UTF-8"
  export LC_ALL="en_US.UTF-8"
}

# Generic CLI settings
{
  export CLICOLOR=1
  export LSCOLORS=ExFxCxDxBxegedabagacad
}

# History settings
{
  export HISTCONTROL="ignoreboth:erasedups"
  export HISTFILESIZE="1000000000"
  export HISTSIZE="1000000"
}

# Update path with GO settings
{
  export GOPATH=/usr/local/Gopath
  export PATH="${GOPATH}/bin:${PATH}"
}

# Colors
# shellcheck disable=SC2034
{
  # Reset
  Color_Off='\e[0m'      # Text Reset

  # Regular Colors
  Black='\e[0;30m'       # Black
  Red='\e[0;31m'         # Red
  Green='\e[0;32m'       # Green
  Yellow='\e[0;33m'      # Yellow
  Blue='\e[0;34m'        # Blue
  Purple='\e[0;35m'      # Purple
  Cyan='\e[0;36m'        # Cyan
  White='\e[0;37m'       # White

  # Bold
  BBlack='\e[1;30m'      # Black
  BRed='\e[1;31m'        # Red
  BGreen='\e[1;32m'      # Green
  BYellow='\e[1;33m'     # Yellow
  BBlue='\e[1;34m'       # Blue
  BPurple='\e[1;35m'     # Purple
  BCyan='\e[1;36m'       # Cyan
  BWhite='\e[1;37m'      # White

  # Underline
  UBlack='\e[4;30m'      # Black
  URed='\e[4;31m'        # Red
  UGreen='\e[4;32m'      # Green
  UYellow='\e[4;33m'     # Yellow
  UBlue='\e[4;34m'       # Blue
  UPurple='\e[4;35m'     # Purple
  UCyan='\e[4;36m'       # Cyan
  UWhite='\e[4;37m'      # White

  # Background
  On_Black='\e[40m'      # Black
  On_Red='\e[41m'        # Red
  On_Green='\e[42m'      # Green
  On_Yellow='\e[43m'     # Yellow
  On_Blue='\e[44m'       # Blue
  On_Purple='\e[45m'     # Purple
  On_Cyan='\e[46m'       # Cyan
  On_White='\e[47m'      # White

  # High Intensty
  IBlack='\e[0;90m'      # Black
  IRed='\e[0;91m'        # Red
  IGreen='\e[0;92m'      # Green
  IYellow='\e[0;93m'     # Yellow
  IBlue='\e[0;94m'       # Blue
  IPurple='\e[0;95m'     # Purple
  ICyan='\e[0;96m'       # Cyan
  IWhite='\e[0;97m'      # White

  # Bold High Intensty
  BIBlack='\e[1;90m'     # Black
  BIRed='\e[1;91m'       # Red
  BIGreen='\e[1;92m'     # Green
  BIYellow='\e[1;93m'    # Yellow
  BIBlue='\e[1;94m'      # Blue
  BIPurple='\e[1;95m'    # Purple
  BICyan='\e[1;96m'      # Cyan
  BIWhite='\e[1;97m'     # White

  # High Intensty backgrounds
  On_IBlack='\e[0;100m'  # Black
  On_IRed='\e[0;101m'    # Red
  On_IGreen='\e[0;102m'  # Green
  On_IYellow='\e[0;103m' # Yellow
  On_IBlue='\e[0;104m'   # Blue
  On_IPurple='\e[10;95m' # Purple
  On_ICyan='\e[0;106m'   # Cyan
  On_IWhite='\e[0;107m'  # White
}

## Shell options
{
  ## https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
  # If set, a command name that is the name of a directory is executed as if it
  # were the argument to the cd command. This option is only used by interactive shells.
  shopt -s autocd

  # If this is set, an argument to the cd builtin command that is not a directory
  # is assumed to be the name of a variable whose value is the directory to change to.
  shopt -u cdable_vars

  # If set, minor errors in the spelling of a directory component in a cd command
  # will be corrected. The errors checked for are transposed characters, a missing
  # character, and a character too many. If a correction is found, the corrected path
  # is printed, and the command proceeds. This option is only used by interactive shells.
  shopt -s cdspell

  # If set, Bash checks the window size after each command and, if necessary, updates
  # the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # If set, Bash attempts to save all lines of a multiple-line command in the same
  # history entry. This allows easy re-editing of multi-line commands.
  shopt -s cmdhist

  # If set, Bash attempts spelling correction on directory names during word completion
  # if the directory name initially supplied does not exist.
  shopt -s dirspell

  # If set, the history list is appended to the file named by the value of the HISTFILE
  # variable when the shell exits, rather than overwriting the file.
  shopt -s histappend

  # If set, and Readline is being used, a user is given the opportunity to re-edit
  # a failed history substitution.
  shopt -s histreedit

  # If set, and Readline is being used, the results of history substitution are not
  # immediately passed to the shell parser. Instead, the resulting line is loaded
  # into the Readline editing buffer, allowing further modification.
  shopt -s histverify
}

# Welcome message
# Please note, it's gonna cause unclean terminal issue on scp from machine running
# This welcome message
{
  NOW=$(date)
  UPTIME=$(uptime)
  if [[ "${PREFERENCES_USE_WELCOME_MESSAGE}" == "yes" ]]; then
    clear
    # CPU {
    echo -e $Red
    echo -n '› '
    echo -e $Red
    echo -n '› '
    echo -en $Yellow
    echo -n "CPU: "
    echo -en $Color_Off
    echo -n "$(sysctl -n machdep.cpu.brand_string)"
    # }
    # Date Time {
    echo -e $Red
    echo -n '› '
    echo -en $Yellow
    echo -n "Now: "
    echo -en $Color_Off
    echo -n $NOW
    # }
    # Uptime {
    echo -e $Red
    echo -n '› '
    echo -en $Yellow
    echo -n "Uptime: "
    echo -en $Color_Off
    echo $UPTIME
    echo -en $Red
    echo -n '› '
    echo -e $Color_Off
    # }
    echo
  fi
}

## Aliases and custom functions
{
  alias s="/usr/local/bin/ssh"
  alias p="/sbin/ping"
  alias p6="/sbin/ping6"
  alias te="/usr/local/bin/telnet"
  alias te6='/usr/local/bin/telnet -6'
  alias re='source ~/.bashrc'
  alias ep='${EDITOR} ~/.bashrc'
  alias t="/usr/sbin/traceroute"
  alias t6="/usr/sbin/traceroute6"
  alias pubkey='pbcopy < ~/.ssh/id_rsa.pub | echo "› SSH public key copied to clipboard"'

  function arc-cleanup-branches() {
    git branch -a | awk '{print $1}' | egrep '^arcpatch-' | xargs git branch -D
  }

  function google() {
    query="${*}"
    open "https://encrypted.google.com/search?client=bash&rls=en&q=${query}&ie=UTF-8&oe=UTF-8" -a "Safari"
  }

  function ssh-rmhost() {
    sed '/^'$1'/d' ~/.ssh/known_hosts &>/dev/null && echo ok || echo failed
  }

  function title() {
    echo -en "\e]0;[$1]\a"
  }

  function restartui() {
    killall -KILL SystemUIServer
    killall -KILL Dock
    killall -KILL Finder
  }

  function tm() {
    tmux a
    if [[ $? -ne 0 ]]; then
      tmux
    fi
  }

  function ssh-fingerprints() {
    local file="$1"
    while read l; do
      [[ -n "${l}" && "${l###}" == "${l}" ]] && ssh-keygen -l -f /dev/stdin <<<$l
    done <$file
  }

  function docker-cleanup() {
    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock spotify/docker-gc
  }

  function json() {
    if [ -t 0 ]; then # argument
      python -mjson.tool <<<"$*" | pygmentize -l javascript
    else # pipe
      python -mjson.tool | pygmentize -l javascript
    fi
  }

  function preview() {
    qlmanage -p "$*" >&/dev/null
  }
}

## bash-completions
{
  complete -cf sudo
  complete -cf man

  complete -F _ssh s

  if [[ -d "/Applications/Docker.app" ]]; then
    . /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion
    . /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion
    . /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion
  fi

  if [[ -f "/usr/local/etc/bash_completion" ]]; then
    . /usr/local/etc/bash_completion
  fi
}

# Prompt
{
  export PS1="\[${IBlue}\]\`date '+%H:%M:%S'\` \[${Red}\]\w\[${Color_Off}\]› "
  export PS2="› "
  export PS4='$0.$LINENO+ '
}

## Homebrew
{
  export HOMEBREW_NO_ANALYTICS="1"
  export HOMEBREW_NO_INSECURE_REDIRECT="1"
  # export HOMEBREW_CASK_OPTS="--require-sha"
}

# Set hostname to title if neccessary
if [[ "${PREFERENCES_HOSTNAME_IN_TITLE}" == "yes" ]]; then
  title "${HOSTNAME}:shell"
fi
